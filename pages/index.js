import Head from 'next/head';
import { PrismicNextImage } from "@prismicio/next";
import { PrismicLink, PrismicText } from "@prismicio/react";
import * as prismicH from "@prismicio/helpers";
import { motion, useAnimation } from "framer-motion";
import React, { useEffect, useState, useRef } from "react";
import { createClient } from "../prismicio";
import styles from "../styles/pages/_home.module.scss";
import { Layout } from "../components/Layout";
import { Swiper, SwiperSlide } from "swiper/react";
import SwiperCore, { EffectCoverflow, Pagination, Navigation } from "swiper";

import 'swiper/css';

export default function Home({settings, navigation, images}) {
  const [imageClicked, setImageClicked] = React.useState(false);
  const [huidigeIndex, setHuidigeIndex] = React.useState(0);
  const [imageSrc, setImageSrc] = React.useState("false");
  const activate = (src) => {
    console.log("Test");
    setImageClicked(true);
    setImageSrc(src);
  };
  const deActivate = () => {
    console.log("Test");
    setImageClicked(false);
    setImageSrc("");
  };
  useEffect(() => {
    SwiperCore.use([EffectCoverflow, Pagination, Navigation]);
  }, []);
  const size = useWindowSize();
  return (
    <Layout
      navigation={navigation}
      settings={settings}
    >
      {imageClicked ? (
          <>
            <div className={styles["box"]}>
              <div className={styles["pics-box"]}>
                <PrismicNextImage
                    field={imageSrc}
                    layout="fill"
                  />
              </div>
              <p onClick={() => deActivate()}>X</p>
            </div>{" "}
            <div></div>{" "}
          </>
        ) : (
          ""
        )}
      <Head>
        <title>Elias Verwilt</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles["main"]}>
        <div className={styles["content"]}>
          {console.log(size)}
        <Swiper
          spaceBetween={50}
          slidesPerView={size.width < 800 ? 1 : 5}
          centeredSlides
          loop
          effect={"coverflow"}
          coverflowEffect={{
            rotate: 0,
            stretch: 100,
            depth: 70,
            modifier: 1,
            slideShadows: false,
          }}
          onSlideChange={(index) => setHuidigeIndex(index.realIndex)}
          className={styles["slider"]}
        >
          <div className={styles["swiper-wrapper"]}>
          {images.map((item, index) => {
              return (
                <SwiperSlide
                key={index}
                  className={styles["swiper-slide"]}
                  onClick={() => activate(item.data.img)}
                >
                  <PrismicNextImage
                    field={item?.data.img}
                    layout="fill"
                  />
                </SwiperSlide>
              );
            })}
            </div>
        </Swiper>
        </div>
        <div className={styles["item-number"]}>
          {huidigeIndex + 1} / {images.length}
        </div>
      </main>
    </Layout>
  )
}
//Gets the data for all images, the navigation and the settings
export async function getStaticProps({ previewData }) {
  const client = createClient({ previewData });

  const navigation = await client.getSingle("navigation");
  const settings = await client.getSingle("settings");
  const images = await client.getAllByType("image");

  return {
    props: {
      navigation,
      settings,
      images,
    },
  };
}

// Hook
function useWindowSize() {
  // Initialize state with undefined width/height so server and client renders match
  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/
  const [windowSize, setWindowSize] = useState({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    // only execute all the code below in client side
    if (typeof window !== 'undefined') {
      // Handler to call on window resize
      function handleResize() {
        // Set window width/height to state
        setWindowSize({
          width: window.innerWidth,
          height: window.innerHeight,
        });
      }
    
      // Add event listener
      window.addEventListener("resize", handleResize);
     
      // Call handler right away so state gets updated with initial window size
      handleResize();
    
      // Remove event listener on cleanup
      return () => window.removeEventListener("resize", handleResize);
    }
  }, []); // Empty array ensures that effect is only run on mount
  return windowSize;
}