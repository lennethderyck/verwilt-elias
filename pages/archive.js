import Head from "next/head";
import { PrismicNextImage } from "@prismicio/next";
import { PrismicLink, PrismicText, PrismicRichText } from "@prismicio/react";
import * as prismicH from "@prismicio/helpers";
import { motion, useAnimation } from "framer-motion";
import React, { useEffect, useState, useRef } from "react";
import { createClient } from "../prismicio";
import { Layout } from "../components/Layout";
import styles from "../styles/pages/_archive.module.scss";
import { Card } from "../components/card";

const Archive = ({ navigation, settings, work, archive }) => {
  console.log(archive);
  function onlyCapitalLetters (str) {
    return str.replace(/[^A-Z]+/g, "");
}
  return (
    <Layout navigation={navigation} settings={settings}>
      <Head>
        <title> Archive | Elias Verwilt</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles["archive"]}>
          {work.data.slices.map((slice) => {
            return <Card slice={slice} />;
          })}
        </div>
        <div className={styles["models"]}>
          <p>Models</p>
          <div className={styles["models-list"]}>
            {archive.data.slices[0]?.items?.map((model) => {
              console.log(model);
              return (
              <div className={styles["model"]}>
                <div className={styles["model-initials"]}><p>{onlyCapitalLetters(model.model[0].text)}</p> <p>{">"}</p></div>
                <p><PrismicText field={model.model} /></p>
              </div>);
            })}
          </div>
        </div>
      </main>
    </Layout>
  );
};

export default Archive;

export async function getStaticProps({ previewData }) {
  const client = createClient({ previewData });

  const navigation = await client.getSingle("navigation");
  const settings = await client.getSingle("settings");
  const work = await client.getByUID("page", "work");
  const archive = await client.getByUID("page", "archive");

  return {
    props: {
      navigation,
      settings,
      work,
      archive,
    },
  };
}
